if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

function prompt_git() {
    # this is >5x faster than mathias's.

    # check if we're in a git repo. (fast)
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # check for what branch we're on. (fast)
    #   if… HEAD isn’t a symbolic ref (typical branch),
    #   then… get a tracking remote branch or tag
    #   otherwise… get the short SHA for the latest commit
    #   lastly just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";


    ## early exit for Chromium & Blink repo, as the dirty check takes ~5s
    ## also recommended (via goo.gl/wAVZLa ) : sudo sysctl kern.maxvnodes=$((512*1024))
    repoUrl=$(git config --get remote.origin.url)
    if grep -q chromium.googlesource.com <<<$repoUrl; then
        dirty=" ⁂"
    else

        # check if it's dirty (slow)
        #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
        dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e "*")

        local marks

        # Check for untracked files.
        [ -n "$(git ls-files --others --exclude-standard)" ] && marks+="+"

        # how many commits local branch is ahead/behind of remote?
        local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
        local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        [ -n "$aheadN" ] && marks+="⇡$aheadN"
        [ -n "$behindN" ] && marks+="⇣$behindN"

        # mathias has a few more checks some may like:
        #    github.com/mathiasbynens/dotfiles/blob/a8bd0d4300/.bash_prompt#L30-L43
    fi


    [ -n "${s}" ] && s=" [${s}]";
    echo -e " ${1}${branchName}$marks${2}$dirty";

    return
}

export PS1="\n\[$(tput bold)\]\[\033[38;5;3m\]\[\033[01;34m\]\w\[\033[00m\]\[\033[32m\]\$(prompt_git)\[\033[00m\]\n$ "
